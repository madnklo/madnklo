import logging
import tests.unit_tests as unittest
import madgraph.various.math_tools.mpl as mpl
from random import random

logger = logging.getLogger('tests.unit_tests')

# class TestMPLInputs(unittest.TestCase):
#     """Tests that check whether inputs are correctly dispatched to different implementations"""
#     pass

class TestMPLValues(unittest.TestCase):
    """Tests for specific values of MPLs obtained through the dispatcher"""

    def check_MPL(self, entries, x, target_value, places=7):
        a = mpl.G(entries, x)
        b = target_value
        check = abs(a-b)/(abs(a)+abs(b))
        return self.assertAlmostEquals(check,0.,places=places)

    def test_weight_0_values(self, list_of_arguments = None):
        if list_of_arguments is None:
            args = [1., 2., 3, 4, 0.1]
        else:
            args = list_of_arguments
        results = [mpl.G([], x) for x in args]
        for result in results:
            self.assertAlmostEquals(result, 1.)

    def test_weight_1_special_values(self):
        """Test special values of the logarithm"""
        arguments_and_results = [
            ([0.], 1., 0.),  # Log(1) = 0
            ([0], 1., 0.),  # Log(1) = 0
            ([0.], 1, 0.),  # Log(1) = 0
            ([2.], 0., 0.) #Log(1-0/2) = 0
        ]
        for ar in arguments_and_results:
            self.check_MPL(*ar)


    def test_weight_1_values(self):
        # List of random arguments and results obtained with mathematica
        arguments_and_results = [
                        [[9.21107], -16.4961, 1.026],
                        [[-8.06773], 31.148, 1.581],
                        [[-4.6424], 30.8599, 2.034],
                        [[-1.54421], 0.372904, 0.216],
                        [[-6.64052], 55.2776, 2.233],
                        [[5.17105], -30.1983, 1.923],
                        [[1.21952], -4.67064, 1.575],
                        [[-3.7541], 9.54775, 1.265],
                        [[-2.1031], 17.8395, 2.249],
                        [[7.99096], -4.91048, 0.479],
                        [[7.1587],-9.95923, 0.872],
                        [[0.], 0.284361, -1.258],
                        [[0.], 26.4668, 3.276],
                        [[0.], 13.7399, 2.62],
                        [[0.], 18.836, 2.936],
                        [[0.], 3.78655, 1.331],
                        [[0.], 10.5159, 2.353],
                        [[0.], 19.4024, 2.965],
                        [[0.], 16.9323, 2.829]
                ]

        for ar in arguments_and_results:
            self.check_MPL(*ar, places=2)


    def test_weight_2_values(self):
        arguments_and_results=[
            [[-4.4782, -5.12642], -1.12333,0.035963803785855231167679469026764629565],
            [[-8.31428, -4.23166],-2.5965, 0.16108906653236806064729654104389099294],
            [[0.853438,3.86515], -9.30922, 1.22411252798638253382550016706619553129],
            [[-3.94648, 8.12562], 1.25581,-0.02147885099276288220013436474637336146],
            [[7.58253, 1.24298],-5.07311, 0.49107417932680941094441002863246855856],
            [[-6.82965,2.21973], -3.4533, -0.41808563833708254800478910362972595252],
            [[-2.59512, 9.80866], -1.72152,-0.10596304481541766288654209360573841765],
            [[-7.72153, 0.410749],-7.66524, -13.2608868589429265452181895582972911749],
            [[-8.97345,4.09685], -6.54866, -0.84651542885612206546958001381794632444],
            [[2.149, -6.64547], -1.2338,-0.041501066276634075737854129205148054905],
            [[8.03453, -5.21162],1.1749, -0.017036612166093384426861892928739036957],
            [[-2.44895,-3.31803], 6.08402, 0.62816458186411314678855638969855507068],
            [[7.89522, 2.12521], -9.61785,0.7809069242117440726610050262233632793],
            [[-0.0744818, -9.7649],3.64466, 0.31454595502819699021045778546399033302],
            [[8.00206,-9.58011], -5.76407, -0.190406423243315022524378900804894215528],
            [[-4.3526, -6.82917], 3.50107,0.118562195481040486683432808766906409949],
            [[-2.55352, -5.56668],7.33931, 0.52180005248794649899296001039407727074],
            [[2.51321,-9.50757], -3.74999, -0.17634558078513392259564174131858402564],
            [[8.07355, -3.00682], -1.85138,-0.079951830223492599674087359390638403250],
            [[3.46416, 4.06913],-5.77395, 0.42627835483653204124875026392434377137],
            [[0.739072,7.01873], 0.520277, 0.055583616053398207387781608387110504736],
            [[5.55068, 1.45176], -3.8398,0.3826047136957196394719544417038986410],
            [[1.37208, 9.08767],-2.79634, 0.12845819579347812611106344487846781704],
            [[4.45229,-2.8936], 4.42152, -3.9019839553815668494184208014407252442],
            [[-5.97726, 5.80399], -4.27017,-0.445247621994004626843687591245725212],
            [[9.98577, -2.32413],5.47274, -0.6335852958397824474596729732371791543],
            [[-7.92468,-6.4771], 8.02195, 0.2866936626710753351100402334510285013],
            [[6.73161, 5.11832], 4.88923,1.4683538711532895423005838944024655744],
            [[4.84944, -0.634878],1.77959, -0.39291775655262809199679099514618265428],
            [[-8.6188,0.00975333], -2.41243, -1.51491602311866647708562255147155844697],
            [[-9.92086, 7.94316], 3.85528,-0.09122938421508079623332875079063292917],
            [[9.71751, 8.48053],-0.403533, 0.00094661162735769764053015079445059019115],
            [[3.47963,7.38029], 2.9708, 0.60588592897105136257969280408873286828],
            [[4.94735, 8.17718], -9.36827,0.38566319235172061975869582787549173218],
            [[3.32895, 5.68391],1.02055, 0.037240021004796332474259908681127013621],
            [[7.6517,-6.31146], 0.620534, -0.004083589013016032446222563857493066061],
            [[6.12274, 0.0247933], -4.44422,2.229867196049875237513506480175641984],
            [[-1.23957, -9.80226],0.533428, 0.0090017164589128308884100365390650760577],
            [[-6.18448,-8.03347], 9.46567, 0.35249137577906289079752536077547344201],
            [[4.23596, 9.46301], -8.6469,0.33353267932073857390890161281874657005],
            [[2.59431, -8.87804],-7.80253, -0.71960570937922232417167549289936643130],
            [[-2.72104,-5.48665], 9.05917, 0.65754816397321383431406416223060421402],
            [[1.179, 1.83564], -4.54324,0.93086278682974757876321657890927949611],
            [[8.46235, 6.35631],0.938088, 0.009314823332954899458516549952171859879],
            [[6.15071,-1.25633], 6.11039, -7.7874965671354554967723529463574893671],
            [[-2.48278, -5.46782], 9.99695,0.76152678685144302531001305160735253906],
            [[8.04346, -3.3242],5.11888, -0.61750982401609885161177447184423110532],
            [[-8.70511,5.48739], 2.76404, -0.081071711538306622637071509527568178475],
            [[-9.0625, -3.38888], 0.920912,0.0119106871831466823127096262924535772654],
            [[6.85572, -1.55504],-1.07356, -0.06701850022717379788786089991101247537],
            [[0.313616,-9.59012], -6.18368, -0.68642776059801079265533661355896263610],
            [[2.8575, 0.631387], -3.863,0.98713779496507140835886083635017715474],
            [[1.52091, -9.47419],-8.00087, -0.8004790678213294014263484312643833452],
            [[7.98712,-1.60292], 6.39223, -1.91269701858827996113146737433885885866],
            [[-1.1027, 2.00395], -0.480172,-0.069386588895031487160900964423219915184],
            [[2.67235, 0.385722],-9.4354, 3.0711668291153607517099533112239313640],
            [[2.85302,8.68679], -6.21385, 0.28041922559491248401390861308706088470]
            ]

        for ar in arguments_and_results:
            self.check_MPL(*ar,places=4)
